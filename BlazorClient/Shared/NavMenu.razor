@implements IDisposable

@using Services
@using Data
@using System.Security.Claims;
@using Microsoft.AspNetCore.SignalR.Client;
@using Blazored.LocalStorage;

@inject ILocalStorageService localStorage
@inject StateService stateService;


@inject UserService userService
@inject AuthenticationStateProvider authenticationStateProvider


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">BlazorClient</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="shoppinglist">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Shopping list
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="userspermissions">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Users permissions
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="invitations">
                @if (NuberOfInvitations > 0)
                {
                    <span><span class="oi oi-list-rich" aria-hidden="true"></span> Invitations <span class="text-danger small">(NEW @NuberOfInvitations)</span></span>
                }
                else
                {
                    <span><span class="oi oi-list-rich" aria-hidden="true"></span> Invitations </span>

                }
            </NavLink>
        </li>
    </ul>
</div>





@code {

    [CascadingParameter]
    public HubConnection _hubConnection { get; set; }

    [CascadingParameter]
    public string _gid { get; set; }
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    int userId;
   

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();


        try
        {
            var authProvider = await authenticationStateProvider.GetAuthenticationStateAsync();
            var userName = authProvider.User.Identity.Name;


            NuberOfInvitations = (await userService.GetInvitationsListAsync(userName)).Count;

            var sUserId = authProvider.User.Claims.Where(a => a.Type == ClaimTypes.NameIdentifier).FirstOrDefault()?.Value;
            if (sUserId != null)
            {
                userId = int.Parse(sUserId);
                SignalRInit();
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }


    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    int NuberOfInvitations;

    void SignalRInit()
    {

        var stateInfo = stateService.GetStateInfo(_gid);

        stateInfo.JoinToHub(RunHub);

    }


    async Task RunHub(HubConnection _con)
    {

        SignalRToDispose = await SignalRHelper.SignalRInvitationInitAsync(
       _con,
       userId,
        authenticationStateProvider,
        userService,
        (_) => { },
        (a) => NuberOfInvitations = a,
        StateHasChanged);
    }

    List<IDisposable> SignalRToDispose;

    public void Dispose()
    {
        SignalRToDispose?.ForEach(a => a?.Dispose());
    }
}
