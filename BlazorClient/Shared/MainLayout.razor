@using BlazorClient.Services
@using Microsoft.Extensions.Configuration;

@inherits LayoutComponentBase
@inject IConfiguration configuration
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@using Blazored.Toast.Configuration

<BlazoredModal />
<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="3"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />


@*<AuthorizeView>
    <Authorized>

        <BlazorClient.Pages.SignalR>
            <div class="sidebar">
                <NavMenu />
            </div>

            <div class="main">
                <div class="top-row px-4">
                    <LoginDisplay />

                    <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
                </div>

                <div class="content px-4">
                    @Body
                </div>
            </div>
        </BlazorClient.Pages.SignalR>

    </Authorized>
    <NotAuthorized>
        <div class="sidebar">
            <NavMenu />
        </div>

        <div class="main">
            <div class="top-row px-4">
                <LoginDisplay />

                <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            </div>

            <div class="content px-4">
                @Body
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>*@



<BlazorClient.Pages.SignalR>
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <LoginDisplay />

            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
    </BlazorClient.Pages.SignalR>
@code{
    //protected override async Task OnInitializedAsync()
    //{


    //    await Data.SignalRHelper.SignalRInitAsync(configuration);

    //}
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChange;
    }

    private void HandleLocationChange(object sender, LocationChangedEventArgs e)
    {
        if (e.IsNavigationIntercepted)
        {
            // do stuff when location changed (clicked navigation button eg. "Users permissions")
            //only for naviagtion
        }
    }


    //---------------------------- probably not working as should be

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
            window.addEventListener('beforeunload', () => {
                sessionStorage.setItem('blazor_refresh', 'true');
            });
        ");
        }
    }

   

    protected override async Task OnInitializedAsync()
    {
        var wasRefresh = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "blazor_refresh");
        if (wasRefresh == "true")
        {
            //TokenClientService._cts?.Cancel();

            //do stuff after 'F5'

            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "blazor_refresh");
        }
    }

}