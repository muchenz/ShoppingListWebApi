@using Microsoft.Extensions.Configuration;
@using Microsoft.AspNetCore.SignalR.Client;
@using BlazorClient.Services;
@using Blazored.LocalStorage;


@inject IConfiguration configuration
@inject StateService _userInfoService
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider authenticationStateProvider

@implements IAsyncDisposable


<CascadingValue Value=_hubConnection>
    <CascadingValue Value=_gid>
        @ChildContent
    </CascadingValue>
</CascadingValue>


    @code {


        [Parameter]
        public RenderFragment ChildContent { get; set; }

        HubConnection _hubConnection;

        string _gid=Guid.NewGuid().ToString();

        int amount = 0;

        protected async override Task OnParametersSetAsync()
        {

            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();

            if (!authState.User.Identity.IsAuthenticated || _hubConnection != null)
            {
                Console.WriteLine("!____________ not authenticaced");
                return;
            }
            else
            {
                Console.WriteLine("!____________ authenticaced");

                await SetHubConnectionAsync();
            }

            await base.OnParametersSetAsync();
        }


        bool _tryingSignalRStart;

        async Task SetHubConnectionAsync()
        {

            if (_tryingSignalRStart) return;

            _tryingSignalRStart = true;


            var isAccessToken = await localStorage.ContainKeyAsync("accessToken");

            if (!isAccessToken) return;

            var accessToken = await localStorage.GetItemAsync<string>("accessToken");


            Console.WriteLine("singnalR amount" + amount++);
            Console.WriteLine("singnalR ststus" + _hubConnection?.State);


            _hubConnection = new HubConnectionBuilder().WithUrl(configuration.GetSection("AppSettings")["SignlRAddress"], (opts) =>
            {
                opts.Headers.Add("Access_Token", accessToken);

                opts.HttpMessageHandlerFactory = (message) =>
                {
                    if (message is HttpClientHandler clientHandler)
                        // bypass SSL certificate
                        clientHandler.ServerCertificateCustomValidationCallback +=
                                                              (sender, certificate, chain, sslPolicyErrors) => { return true; };
                    return message;
                };
            }).WithAutomaticReconnect().Build();



            await _hubConnection.StartAsync();
        //    var gid = await localStorage.GetItemAsync<string>("gid");
            _userInfoService.SetStateInfo(_gid, (a) => a.ClientSignalRID = _hubConnection.ConnectionId);
            _userInfoService.GetStateInfo(_gid).HubState.CallHuBReady(_hubConnection);

            _hubConnection.Reconnected += (connectionId) =>
            {
                _userInfoService.SetStateInfo(_gid, (a) => a.ClientSignalRID = connectionId);
                return Task.CompletedTask;
            };
            _tryingSignalRStart = false;
        }


        public async ValueTask DisposeAsync()
        {
            _hubConnection?.DisposeAsync();
        }

    }
