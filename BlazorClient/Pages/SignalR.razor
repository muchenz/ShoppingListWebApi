@using Microsoft.Extensions.Configuration;
@using Microsoft.AspNetCore.SignalR.Client;
@using BlazorClient.Services;
@using Blazored.LocalStorage;

@inject NavigationManager Navigation

@inject StateService _userInfoService
@inject AuthenticationStateProvider authenticationStateProvider
@inject SignalRService signalRService
@implements IAsyncDisposable

        @ChildContent


@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool _signalRStarted = false;

    [CascadingParameter]
    public Error Error { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    //TODO: mayby better OnInitializedAsync() ??? test
    protected async override Task OnInitializedAsync()
    //protected async override Task OnParametersSetAsync()
    {


        authenticationStateProvider.AuthenticationStateChanged += async task =>
         {
             var authState = await task;
             var user = authState.User;

             if (user.Identity?.IsAuthenticated == true && !_signalRStarted)
             {
                 _signalRStarted = true;
                 await signalRService.StartConnectionAsync();
             }
             else if (!user.Identity?.IsAuthenticated == true && _signalRStarted)
             {
                 _signalRStarted = false;
                 await signalRService.StopConnectionAsync();
             }
         };

        var authState = await authenticationState;

        var isAuth = authState.User.Identity?.IsAuthenticated ?? false;

        if (!signalRService.IsConnected && isAuth)
            await signalRService.StartConnectionAsync();
    }





    public async ValueTask DisposeAsync()
    {
    }
}
