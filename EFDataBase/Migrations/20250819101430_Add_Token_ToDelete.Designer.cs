// <auto-generated />
using System;
using EFDataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFDataBase.Migrations
{
    [DbContext(typeof(ShopingListDBContext))]
    [Migration("20250819101430_Add_Token_ToDelete")]
    partial class Add_Token_ToDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("EFDataBase.InvitationEntity", b =>
                {
                    b.Property<int>("InvitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("EmailAddress");

                    b.Property<int>("ListAggregatorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ListAggregatorId");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PermissionLevel");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("SenderName");

                    b.HasKey("InvitationId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("EFDataBase.ListAggregatorEntity", b =>
                {
                    b.Property<int>("ListAggregatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ListAggregatorId");

                    b.Property<string>("ListAggregatorName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("ListAggregatorName");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Order");

                    b.HasKey("ListAggregatorId");

                    b.ToTable("ListAggregator", (string)null);
                });

            modelBuilder.Entity("EFDataBase.ListEntity", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ListId");

                    b.Property<int>("ListAggregatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("ListName");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Order");

                    b.HasKey("ListId");

                    b.HasIndex("ListAggregatorId");

                    b.ToTable("List", (string)null);
                });

            modelBuilder.Entity("EFDataBase.ListItemEntity", b =>
                {
                    b.Property<int>("ListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ListItemId");

                    b.Property<int>("ListId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListItemName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("ListItemName");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Order");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnName("State");

                    b.HasKey("ListItemId");

                    b.HasIndex("ListId");

                    b.ToTable("ListItem", (string)null);
                });

            modelBuilder.Entity("EFDataBase.LogEntity", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("log_id");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_date");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("TEXT")
                        .HasColumnName("exception_message");

                    b.Property<long?>("InnerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("inner_id");

                    b.Property<string>("LogLevel")
                        .HasColumnType("TEXT")
                        .HasColumnName("log_level");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT")
                        .HasColumnName("message");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT")
                        .HasColumnName("source");

                    b.Property<string>("StackTrace")
                        .HasColumnType("TEXT")
                        .HasColumnName("stack_trace");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.HasIndex("InnerId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("EFDataBase.RefreshTokenSessionEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessTokenJti")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRefreshTokenRevoked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokenSession", (string)null);
                });

            modelBuilder.Entity("EFDataBase.RoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("RoleId");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("EFDataBase.ToDeleteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemToDeleteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ToDelete", (string)null);
                });

            modelBuilder.Entity("EFDataBase.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("EmailAddress");

                    b.Property<byte>("LoginType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("LoginType");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EFDataBase.UserListAggregatorEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ListAggregatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PermissionLevel");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER")
                        .HasColumnName("State");

                    b.HasKey("UserId", "ListAggregatorId");

                    b.HasIndex("ListAggregatorId");

                    b.ToTable("UserListAggregators");
                });

            modelBuilder.Entity("EFDataBase.UserRolesEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRolesEntity");
                });

            modelBuilder.Entity("EFDataBase.ListEntity", b =>
                {
                    b.HasOne("EFDataBase.ListAggregatorEntity", "ListAggregator")
                        .WithMany("Lists")
                        .HasForeignKey("ListAggregatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListAggregator");
                });

            modelBuilder.Entity("EFDataBase.ListItemEntity", b =>
                {
                    b.HasOne("EFDataBase.ListEntity", "List")
                        .WithMany("ListItems")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("EFDataBase.LogEntity", b =>
                {
                    b.HasOne("EFDataBase.LogEntity", "Inner")
                        .WithMany()
                        .HasForeignKey("InnerId");

                    b.Navigation("Inner");
                });

            modelBuilder.Entity("EFDataBase.RefreshTokenSessionEntity", b =>
                {
                    b.HasOne("EFDataBase.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFDataBase.UserListAggregatorEntity", b =>
                {
                    b.HasOne("EFDataBase.ListAggregatorEntity", "ListAggregator")
                        .WithMany("UserListAggregators")
                        .HasForeignKey("ListAggregatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataBase.UserEntity", "User")
                        .WithMany("UserListAggregators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListAggregator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFDataBase.UserRolesEntity", b =>
                {
                    b.HasOne("EFDataBase.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataBase.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFDataBase.ListAggregatorEntity", b =>
                {
                    b.Navigation("Lists");

                    b.Navigation("UserListAggregators");
                });

            modelBuilder.Entity("EFDataBase.ListEntity", b =>
                {
                    b.Navigation("ListItems");
                });

            modelBuilder.Entity("EFDataBase.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EFDataBase.UserEntity", b =>
                {
                    b.Navigation("UserListAggregators");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
